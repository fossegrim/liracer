{"version":3,"sources":["colors.js","components/Window.js","components/Messages.js","components/ChatAndJoinButton.js","components/CodeField.js","App.js","serviceWorker.js","index.js"],"names":["colors","layer0Background","layer1Background","layer1Foreground","layer2Background","wrongCharColor","playerCursorColor","opponentCursorColor","Titlebar","styled","div","Content","Window","children","MessageDiv","Message","props","message","sender","content","MessagesDiv","Messages","messages","map","index","key","FlexBox","ChatForm","form","ChatInput","input","buttonCSS","layer2Foreground","ChatSubmit","button","JoinButtonContainer","JoinButton","ChatAndJoinButton","onSubmit","handleSendMessage","name","onClick","handleClickJoinGame","Pre","pre","CodeField","snippet","onKeyDown","event","preventDefault","char","length","wrongChars","code","cursorPosition","setCursorPosition","setWrongChars","tabIndex","split","isOnPlayerCursor","isOnOpponentCursor","Object","values","opponentCursorPositions","some","position","isOnLastWrongChar","isOnWrongChar","style","background","Grid","App","useState","setSnippet","roundID","setRoundID","setOpponentCursorPositions","setMessages","socket","setSocket","parseGameIDFromLocation","location","decodeURI","pathname","slice","window","onpopstate","gameID","target","emit","history","replaceState","undefined","useEffect","Math","random","toString","replace","pushState","io","on","game","sid","isMobile","navigator","any","_","prompt","value","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.7da53053.chunk.js","sourcesContent":["const colors = {\n    layer0Background: '#fdf6e3',\n    layer1Background: '#eee8d5',\n    layer1Foreground: '#4d4a44',\n    layer2Background: '#ded8c5',\n    wrongCharColor:   '#ba5d5d',\n    playerCursorColor: '#cfbaa5',\n    opponentCursorColor: '#baba70'\n}\n\nexport default colors","import React from 'react'\nimport styled from 'styled-components'\nimport colors from '../colors'\n\nconst titleBarHeight = '30px'\n\nconst Titlebar = styled.div`\n  height: ${titleBarHeight};\n  background: ${colors.layer2Background};\n`\n\nconst Content = styled.div`\n  height: calc(100% - ${titleBarHeight});\n  background: ${colors.layer1Background};\n`\n\nconst Window = ({ children }) => {\n  return (\n    <div>\n      <Titlebar/>\n      <Content>{children}</Content>\n    </div>\n  )\n}\n\nexport default Window","import React from 'react'\nimport styled from 'styled-components'\nimport colors from '../colors'\n\nconst MessageDiv = styled.div`\n  // Make it easy to visually differentiate messages\n  padding-bottom: 7px;\n`\n\nconst Message = (props) => {\n  return (\n    <MessageDiv>\n      {/* IMPORTANT SPACE --> */}\n      <b>&lt;{props.message.sender}&gt;</b> <span>{props.message.content}</span>\n    </MessageDiv>\n  )\n}\n\nconst MessagesDiv = styled.div`\n  flex-basis: 100%;\n  padding: 1rem;\n  // Scrollbar for message box\n  flex: 1 1 auto; \n  overflow-y: auto;\n  height: 0px;\n  color: ${colors.layer1Foreground};\n  // Copied from default React index.css\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n`\n\nconst Messages = (props) => {\n  return (\n    <MessagesDiv>\n      {\n        props.messages.map((message, index) => <Message key={index} message={ message }/>)\n      }\n    </MessagesDiv>\n  )\n}\n\nexport default Messages","import React from 'react'\nimport Window from './Window'\nimport Messages from './Messages'\nimport styled from 'styled-components'\nimport colors from '../colors'\n\nconst FlexBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst ChatForm = styled.form`\n  background: ${colors.layer2Background};\n  height: 50px;\n  display: flex;\n  padding: calc(1rem / 2);\n  box-sizing: border-box;\n`\n\nconst ChatInput = styled.input`\n  background: ${colors.layer1Background};\n  color: ${colors.layer1Foreground};\n  border: 0;\n  width: 100%;\n  padding: 0 3px 3px 0;\n  box-sizing: border-box;\n  outline: none;\n  border-right: 1em solid ${colors.layer2Background};\n`\n\nconst buttonCSS = `\n  :hover {\n    background: ${colors.layer2Background};\n    color: ${colors.layer2Foreground};\n  }\n  background: ${colors.layer1Background};\n  color: ${colors.layer1Foreground};\n  transition-duration: 0.12s;\n  font-weight: bold;\n  font-size: 14px;\n  padding: 0;\n  cursor: pointer;\n  border: 0;\n  border-radius: 5px;\n  outline: none;\n`\n\nconst ChatSubmit = styled.button`\n  ${buttonCSS}\n  width: 70px;\n  border: solid ${colors.layer2Background} 0;\n`\n\nconst JoinButtonContainer = styled.div`\n  border: calc(1em / 2) solid ${colors.layer2Background};\n  border-top: 0;\n  height: 40px;\n  box-sizing: border-box;\n  background: ${colors.layer2Background};\n`\n\nconst JoinButton = styled.button`\n  ${buttonCSS}\n  height: 100%;\n  width: 100%;\n`\n\nconst ChatAndJoinButton = (props) => {\n  return (\n    <Window>\n      <FlexBox>\n        <Messages messages={props.messages}/>\n        <ChatForm onSubmit={props.handleSendMessage}>\n          <ChatInput name='input' />\n          <ChatSubmit>SEND</ChatSubmit>\n        </ChatForm>\n        <JoinButtonContainer>\n          <JoinButton onClick={props.handleClickJoinGame}>\n            JOIN GAME\n          </JoinButton>\n        </JoinButtonContainer>\n      </FlexBox>\n    </Window>\n  )\n}\n\nexport default ChatAndJoinButton","import React from 'react'\nimport Window from './Window'\nimport styled from 'styled-components'\nimport colors from '../colors'\n\nconst contentPadding = '1rem'\n\nconst Pre = styled.pre`\n  padding: ${contentPadding};\n  margin: 0;\n  color: ${colors.layer1Foreground};\n  outline: none;\n  box-sizing: border-box;\n  height: 100%;\n`\n\nconst mapKeyToChar = (key) => {\n  if (key === \"Enter\"){\n    return \"\\n\"\n  } else if (key === 'Tab') {\n    return \"\\t\"\n  } else if (key.length === 1) {\n    return key\n  } else {\n    return null\n  }\n}\n\nconst CodeField = (props) => {\n  const handleKeyDown = (event) => {\n    event.preventDefault()\n\n    const char = mapKeyToChar(event.key)\n    if(char) {\n      if (props.wrongChars === 0 && props.snippet.code[props.cursorPosition] === char){\n        props.setCursorPosition(props.cursorPosition + 1)\n      } else {\n        props.setWrongChars(props.wrongChars + 1)\n      }\n    } else {\n      if(event.key === 'Backspace') {\n        if(props.wrongChars > 0) {\n          props.setWrongChars(props.wrongChars - 1)\n        } else if(props.cursorPosition > 0) {\n          props.setCursorPosition(props.cursorPosition - 1)\n        }\n      }\n    }\n  }\n\n  return (\n    <Window>\n      {\n        props.snippet && (\n          <Pre onKeyDown={handleKeyDown} tabIndex='0'>\n            {\n              props.snippet.code.split('').map((char, index) => {\n                const isOnPlayerCursor = index === props.cursorPosition\n                const isOnOpponentCursor = Object.values(props.opponentCursorPositions).some(position => position === index)\n                const isOnLastWrongChar = props.wrongChars > 0 && index === props.cursorPosition + props.wrongChars - 1\n                const isOnWrongChar = index >= props.cursorPosition && index < props.cursorPosition + props.wrongChars\n\n                let style = {}\n\n                isOnOpponentCursor && (style.background = colors.opponentCursorColor)\n                isOnPlayerCursor && (style.background = colors.playerCursorColor)\n\n                if(props.wrongChars > 0) {\n                  if(isOnWrongChar)\n                  style.background = colors.wrongCharColor\n                }\n\n                // Visualize newlines, by using the ↵ character\n                // Only show ↵ when the cursor, or wrongChars markings is on newline\n                if(char === \"\\n\" && (isOnLastWrongChar || isOnOpponentCursor || (isOnPlayerCursor && !isOnWrongChar))) {\n                  char = \"↵\\n\"\n                }\n\n                return (\n                  <span key={index} style={style}>\n                    {\n                      char\n                    }\n                  </span>\n                )\n              })\n            }\n          </Pre>\n        )\n      }\n    </Window>\n  )\n}\n\nexport default CodeField","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport io from 'socket.io-client'\nimport isMobile from 'ismobilejs'\nimport ChatAndJoinButton from './components/ChatAndJoinButton'\nimport CodeField from './components/CodeField'\nimport colors from './colors'\nconst Grid = styled.div`\n// Consume the entire viewport\nposition: fixed;\ntop: 0;\nleft: 0;\nbottom: 0;\nright: 0;\noverflow: auto;\n\n// Makes Pre take up the proper amount of space on Safari\n// DON'T TOUCH\nheight: 100%;\nbox-sizing: border-box;\n// DON'T TOUCH\n\n// Use a grid layout\ndisplay: grid;\ngrid-template-columns: minmax(300px, 500px) minmax(750px, auto);\npadding: 2rem;\ncolumn-gap: 2rem;\n\n// Color\nbackground: ${colors.layer0Background}\n`\n\nfunction App() {\n  const [snippet, setSnippet] = useState()\n  const [roundID, setRoundID] = useState()\n  const [cursorPosition, setCursorPosition] = useState()\n  const [opponentCursorPositions, setOpponentCursorPositions] = useState({})\n  const [wrongChars, setWrongChars] = useState()\n  const [messages, setMessages] = useState([])\n  const [socket, setSocket] = useState()\n\n  const handleClickJoinGame = _ => {\n    const gameID = prompt('GameID')\n    if(gameID !== null && gameID !== '') {\n      socket.emit('join game', gameID)\n      history.pushState(undefined, undefined, gameID) // eslint-disable-line no-restricted-globals\n    }\n  }\n\n  const handleSendMessage = event => {\n    event.preventDefault()\n\n    socket.emit('chat message', event.target.input.value)\n    event.target.input.value = ''\n  }\n\n  const parseGameIDFromLocation = location => decodeURI(location.pathname).slice(1)\n\n  window.onpopstate = event => {\n    const gameID = parseGameIDFromLocation(event.target.location)\n    socket.emit('join game', gameID)\n    history.replaceState(undefined, undefined, gameID) // eslint-disable-line no-restricted-globals\n  }\n\n  const createPseudoRandomString = _ => Math.random().toString(36).replace(/[^a-z]+/g, '')\n  useEffect(() => {\n    if(!socket){\n      return\n    }\n\n    if(window.location.pathname === '/') {\n      const gameID = createPseudoRandomString()\n      socket.emit('join game', gameID)\n      history.replaceState(undefined, undefined, gameID) // eslint-disable-line no-restricted-globals\n    } else {\n      const gameID = parseGameIDFromLocation(window.location)\n      socket.emit('join game', gameID)\n      history.pushState(undefined, undefined, gameID) // eslint-disable-line no-restricted-globals\n    }\n  }, [socket])\n\n  useEffect(() => {\n    if(process.env.NODE_ENV !== 'production') {\n      setSocket(io('http://localhost:3101'))\n    } else {\n      setSocket(io())\n    }\n  }, [])\n\n  useEffect(() => {\n    if(!socket) {\n      return\n    }\n\n    socket.on('game state', (game) => {\n      setSnippet(game.snippet)\n      setWrongChars(0)\n      setOpponentCursorPositions({})\n      setCursorPosition(0)\n\n      // It is crucial that the roundID is updated after the cursor is set to 0\n      setRoundID(game.roundID)\n    })\n\n    socket.on('chat message', message => {\n      setMessages(messages => [...messages, message])\n    })\n\n    socket.on('cursor position update', ({\n      sid, // socket id, identifies the player/client\n      position\n    }) => {\n      setOpponentCursorPositions(opponentCursorPositions => ({...opponentCursorPositions, [sid]: position }))\n    })\n  }, [socket])\n\n  useEffect(() => {\n    if(!socket || cursorPosition === undefined) {\n      return\n    }\n\n    socket.emit('cursor position update', {\n      position: cursorPosition,\n      roundID\n    })\n  }, [roundID, socket, cursorPosition])\n\n  return isMobile(window.navigator).any ? (\n    <div>\n      <h3>This game is not playable on mobile devices</h3>\n      <p>To play liracer, open it on a laptop or desktop computer.</p>\n    </div>\n  ) : (\n    <Grid>\n      <ChatAndJoinButton messages={ messages }\n                         handleClickJoinGame={ handleClickJoinGame }\n                         handleSendMessage={handleSendMessage}/>\n      <CodeField snippet={ snippet }\n                 cursorPosition={cursorPosition}\n                 opponentCursorPositions={opponentCursorPositions}\n                 setCursorPosition={setCursorPosition}\n                 wrongChars={wrongChars}\n                 setWrongChars={setWrongChars} />\n    </Grid>\n  ) \n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}